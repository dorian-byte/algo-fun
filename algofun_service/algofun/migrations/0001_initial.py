# Generated by Django 4.0.3 on 2023-12-18 04:25

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=100)),
                ('content', models.TextField()),
                ('note_type', models.CharField(choices=[('red', 'Red'), ('green', 'Green'), ('blue', 'Blue'), ('purple', 'Purple'), ('pink', 'Pink'), ('gray', 'Gray')], default='gray', max_length=30)),
                ('submitted_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_starred', models.BooleanField(default=False)),
                ('start_line_number', models.PositiveIntegerField(blank=True, null=True)),
                ('end_line_number', models.PositiveIntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, max_length=100, unique=True)),
                ('leetcode_number', models.PositiveIntegerField(blank=True, null=True, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('asked_by_faang', models.BooleanField(default=False)),
                ('acceptance_rate', models.FloatField(blank=True, null=True)),
                ('frequency', models.FloatField(blank=True, null=True)),
                ('difficulty', models.CharField(blank=True, choices=[('easy', 'easy'), ('medium', 'medium'), ('hard', 'hard')], max_length=6)),
                ('time_complexity_requirement', models.CharField(blank=True, choices=[('o1', 'o1'), ('nsqrt', 'nsqrt'), ('logn', 'logn'), ('n', 'n'), ('nlogn', 'nlogn'), ('n2', 'n2'), ('n3', 'n3'), ('2n', '2n'), ('nfactorial', 'nfactorial')], max_length=20)),
                ('space_complexity_requirement', models.CharField(blank=True, choices=[('o1', 'o1'), ('nsqrt', 'nsqrt'), ('logn', 'logn'), ('n', 'n'), ('nlogn', 'nlogn'), ('n2', 'n2'), ('n3', 'n3'), ('2n', '2n'), ('nfactorial', 'nfactorial')], max_length=20)),
                ('url', models.URLField(blank=True)),
                ('lintcode_equivalent_problem_number', models.PositiveIntegerField(blank=True, null=True)),
                ('lintcode_equivalent_problem_url', models.URLField(blank=True, null=True)),
                ('companies', models.ManyToManyField(blank=True, to='algofun.company')),
                ('similar_problems', models.ManyToManyField(blank=True, related_name='reverse_similar_problems', to='algofun.problem')),
            ],
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='TaggedItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='algofun.tag')),
            ],
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.TextField(blank=True)),
                ('proficiency_level', models.CharField(choices=[('no_understanding', 'no understanding'), ('conceptual_understanding', 'conceptual understanding'), ('no_pass', 'no pass'), ('guided_pass', 'guided pass'), ('unsteady_pass', 'unsteady pass'), ('smooth_pass', 'smooth pass'), ('smooth_optimal_pass', 'smooth optimal pass')], max_length=30)),
                ('submitted_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('duration', models.PositiveIntegerField(blank=True, null=True)),
                ('is_solution', models.BooleanField(default=False)),
                ('is_interview_mode', models.BooleanField(default=False)),
                ('is_whiteboard_mode', models.BooleanField(default=False)),
                ('time_complexity', models.CharField(blank=True, choices=[('o1', 'o1'), ('nsqrt', 'nsqrt'), ('logn', 'logn'), ('n', 'n'), ('nlogn', 'nlogn'), ('n2', 'n2'), ('n3', 'n3'), ('2n', '2n'), ('nfactorial', 'nfactorial')], max_length=20)),
                ('space_complexity', models.CharField(blank=True, choices=[('o1', 'o1'), ('nsqrt', 'nsqrt'), ('logn', 'logn'), ('n', 'n'), ('nlogn', 'nlogn'), ('n2', 'n2'), ('n3', 'n3'), ('2n', '2n'), ('nfactorial', 'nfactorial')], max_length=20)),
                ('methods', models.ManyToManyField(blank=True, to='algofun.topic')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='algofun.problem')),
            ],
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=100)),
                ('url', models.URLField(blank=True)),
                ('resource_type', models.CharField(blank=True, choices=[('image', 'image'), ('video', 'video'), ('article', 'article'), ('solution_post', 'solution post')], max_length=100)),
                ('note', models.ForeignKey(default=4, on_delete=django.db.models.deletion.CASCADE, related_name='resources', to='algofun.note')),
            ],
        ),
        migrations.AddField(
            model_name='problem',
            name='source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='problems', to='algofun.source'),
        ),
        migrations.AddField(
            model_name='problem',
            name='topics',
            field=models.ManyToManyField(blank=True, to='algofun.topic'),
        ),
        migrations.AddField(
            model_name='note',
            name='mentioned_problem',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notes_mentioning_this_problem', to='algofun.problem'),
        ),
        migrations.AddField(
            model_name='note',
            name='mentioned_submission',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notes_mentioning_this_submission', to='algofun.submission'),
        ),
        migrations.AddField(
            model_name='note',
            name='submission',
            field=models.ForeignKey(default=4, on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='algofun.submission'),
        ),
    ]
