# Generated by Django 4.0.3 on 2023-10-01 20:15

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Method',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(blank=True, null=True)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_starred', models.BooleanField(default=False)),
                ('note_type', models.CharField(blank=True, choices=[('intuition', 'intuition'), ('stuck_point', 'stuck point'), ('qna', 'qna'), ('err', 'err')], default='intuition', max_length=100, null=True)),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_%(app_label)s.%(class)s_set+', to='contenttypes.contenttype')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, max_length=100, unique=True)),
                ('leetcode_number', models.IntegerField(blank=True, null=True, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('difficulty', models.CharField(blank=True, choices=[('easy', 'easy'), ('medium', 'medium'), ('hard', 'hard')], db_index=True, default='easy', max_length=6, null=True)),
                ('time_complexity_requirement', models.CharField(blank=True, choices=[('n', 'n'), ('logn', 'logn'), ('nlogn', 'nlogn'), ('n2', 'n2'), ('n3', 'n3')], db_index=True, default='n', max_length=5, null=True)),
                ('space_complexity_requirement', models.CharField(blank=True, choices=[('n', 'n'), ('logn', 'logn'), ('nlogn', 'nlogn'), ('n2', 'n2'), ('n3', 'n3')], db_index=True, default='n', max_length=5, null=True)),
                ('url', models.URLField(blank=True, null=True)),
                ('lintcode_equivalent_problem_number', models.IntegerField(blank=True, null=True)),
                ('lintcode_equivalent_problem_url', models.URLField(blank=True, null=True)),
                ('companies', models.ManyToManyField(blank=True, to='algofun.company')),
            ],
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.TextField()),
                ('passed', models.BooleanField()),
                ('proficiency_level', models.CharField(choices=[('no_understanding', 'no understanding'), ('conceptual_understanding', 'conceptual understanding'), ('borrowed_solution', 'borrowed solution'), ('coded_no_pass', 'coded no pass'), ('guided_pass', 'guided pass'), ('unsteady_pass', 'unsteady pass'), ('smooth_pass', 'smooth pass'), ('smooth_optimal_pass', 'smooth optimal pass')], default='no_understanding', max_length=100)),
                ('submitted_at', models.DateTimeField()),
                ('duration', models.DurationField(blank=True, null=True)),
                ('is_best', models.BooleanField(default=False)),
                ('reference_solution_url', models.URLField(blank=True, null=True)),
                ('method', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='algofun.method')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='algofun.problem')),
            ],
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='SubmissionPicture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField()),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='algofun.submission')),
            ],
        ),
        migrations.AddField(
            model_name='problem',
            name='source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='algofun.source'),
        ),
        migrations.AddField(
            model_name='problem',
            name='topics',
            field=models.ManyToManyField(blank=True, to='algofun.topic'),
        ),
        migrations.CreateModel(
            name='SubmissionNote',
            fields=[
                ('note_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='algofun.note')),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='algofun.submission')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('algofun.note',),
        ),
        migrations.CreateModel(
            name='ProblemNote',
            fields=[
                ('note_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='algofun.note')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='algofun.problem')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('algofun.note',),
        ),
    ]
